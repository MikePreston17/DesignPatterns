<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>MySnippetTitle</Title>
      <Author>pcadmin</Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>
        MySnippetTitle
      </Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>MySnippetTitle</ID>
          <ToolTip></ToolTip>
          <Default>
          </Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Linq.Expressions</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp" Delimiter="$">
        <![CDATA[
	 
    public interface IRepository<TEntity> : IDisposable where TEntity : class
    {
        TEntity Get(int id);
        IEnumerable<TEntity> GetAll();
        IEnumerable<TEntity> Find(Expression<Func<TEntity, bool>> predicate);
        TEntity Add(TEntity entity);
        IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities);
        TEntity Remove(TEntity entity);
        IEnumerable<TEntity> RemoveRange(IEnumerable<TEntity> entities);
    }

    public abstract class Repository<TEntity> : IRepository<TEntity> where TEntity : class
    {
        protected IDbConnection database;

        protected Repository(string connectionString)
        {
            database = new SqlConnection(connectionString);
        }

        protected Repository(IDbConnection database)
        {
            this.database = database;
        }

        public abstract TEntity Add(TEntity entity);
        public abstract IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities);
        public abstract void Dispose();
        public abstract IEnumerable<TEntity> Find(Expression<Func<TEntity, bool>> predicate);
        public abstract TEntity Get(int id);
        public abstract IEnumerable<TEntity> GetAll();
        public abstract TEntity Remove(TEntity entity);
        public abstract IEnumerable<TEntity> RemoveRange(IEnumerable<TEntity> entities);
    }

	  ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>